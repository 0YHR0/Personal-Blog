(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{520:function(a,t,e){"use strict";e.r(t);var s=e(2),r=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"ch04-ribbon负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ch04-ribbon负载均衡"}},[a._v("#")]),a._v(" Ch04 Ribbon负载均衡")]),a._v(" "),t("p",[a._v("原理："),t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/image-20220412001639210.png",alt:"image-20220412001639210"}})]),a._v(" "),t("p",[a._v("Ctrl+shift+F在英文輸入法下全局搜索，中文输入法下切换简体繁体")]),a._v(" "),t("p",[a._v("Ctrl+H查找实现类")]),a._v(" "),t("p",[a._v("那么我们发出的请求明明是http://userservice/user/1，怎么变成了http://localhost:8081的呢？")]),a._v(" "),t("p",[a._v("显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是"),t("code",[a._v("LoadBalancerInterceptor")]),a._v("，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。")]),a._v(" "),t("p",[a._v("我们进行源码跟踪：")]),a._v(" "),t("h3",{attrs:{id:"_1-loadbalancerintercepor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-loadbalancerintercepor"}},[a._v("#")]),a._v(" 1）LoadBalancerIntercepor")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/1525620483637.png",alt:"1525620483637"}})]),a._v(" "),t("p",[a._v("可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("request.getURI()")]),a._v("：获取请求uri，本例中就是 http://user-service/user/8")]),a._v(" "),t("li",[t("code",[a._v("originalUri.getHost()")]),a._v("：获取uri路径的主机名，其实就是服务id，"),t("code",[a._v("user-service")])]),a._v(" "),t("li",[t("code",[a._v("this.loadBalancer.execute()")]),a._v("：处理服务id，和用户请求。")])]),a._v(" "),t("p",[a._v("这里的"),t("code",[a._v("this.loadBalancer")]),a._v("是"),t("code",[a._v("LoadBalancerClient")]),a._v("类型，我们继续跟入。")]),a._v(" "),t("h3",{attrs:{id:"_2-loadbalancerclient"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-loadbalancerclient"}},[a._v("#")]),a._v(" 2）LoadBalancerClient")]),a._v(" "),t("p",[a._v("继续跟入execute方法：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/1525620787090.png",alt:"1525620787090"}})]),a._v(" "),t("p",[a._v("代码是这样的：")]),a._v(" "),t("ul",[t("li",[a._v("getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。")]),a._v(" "),t("li",[a._v("getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务")])]),a._v(" "),t("p",[a._v("放行后，再次访问并跟踪，发现获取的是8081：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/1525620835911.png",alt:"1525620835911"}})]),a._v(" "),t("p",[a._v("果然实现了负载均衡。")]),a._v(" "),t("h3",{attrs:{id:"_3-负载均衡策略irule"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-负载均衡策略irule"}},[a._v("#")]),a._v(" 3）负载均衡策略IRule")]),a._v(" "),t("p",[a._v("在刚才的代码中，可以看到获取服务使通过一个"),t("code",[a._v("getServer")]),a._v("方法来做负载均衡:")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/1525620835911.png",alt:"1525620835911"}})]),a._v(" "),t("p",[a._v("我们继续跟入：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/1544361421671.png",alt:"1544361421671"}})]),a._v(" "),t("p",[a._v("继续跟踪源码chooseServer方法，发现这么一段代码：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/1525622652849.png",alt:"1525622652849"}})]),a._v(" "),t("p",[a._v("我们看看这个rule是谁：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/1525622699666.png",alt:"1525622699666"}})]),a._v(" "),t("p",[a._v("这里的rule默认值是一个"),t("code",[a._v("RoundRobinRule")]),a._v("，看类的介绍：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/1525622754316.png",alt:"1525622754316"}})]),a._v(" "),t("p",[a._v("轮询")]),a._v(" "),t("h3",{attrs:{id:"_4-总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[a._v("#")]),a._v(" 4）总结")]),a._v(" "),t("p",[a._v("SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/image-20210713224724673.png",alt:"image-20210713224724673"}})]),a._v(" "),t("p",[a._v("基本流程如下：")]),a._v(" "),t("ul",[t("li",[a._v("拦截我们的RestTemplate请求http://userservice/user/1")]),a._v(" "),t("li",[a._v("RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service")]),a._v(" "),t("li",[a._v("DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表")]),a._v(" "),t("li",[a._v("eureka返回列表，localhost:8081、localhost:8082")]),a._v(" "),t("li",[a._v("IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081")]),a._v(" "),t("li",[a._v("RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到http://localhost:8081/user/1，发起真实请求")])]),a._v(" "),t("h2",{attrs:{id:"负载均衡策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡策略"}},[a._v("#")]),a._v(" 负载均衡策略")]),a._v(" "),t("p",[a._v("负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/image-20210713225653000.png",alt:"image-20210713225653000"}})]),a._v(" "),t("p",[a._v("不同规则的含义如下：")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("strong",[a._v("内置负载均衡规则类")])]),a._v(" "),t("th",[t("strong",[a._v("规则描述")])])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("RoundRobinRule")]),a._v(" "),t("td",[a._v("简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。")])]),a._v(" "),t("tr",[t("td",[a._v("AvailabilityFilteringRule")]),a._v(" "),t("td",[a._v("对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的"),t("clientName",[a._v("."),t("clientConfigNameSpace",[a._v(".ActiveConnectionsLimit属性进行配置。")])],1)],1)]),a._v(" "),t("tr",[t("td",[a._v("WeightedResponseTimeRule")]),a._v(" "),t("td",[a._v("为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。")])]),a._v(" "),t("tr",[t("td",[t("strong",[a._v("ZoneAvoidanceRule")])]),a._v(" "),t("td",[a._v("以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。优先选择和自己靠近的服务器上的服务")])]),a._v(" "),t("tr",[t("td",[a._v("BestAvailableRule")]),a._v(" "),t("td",[a._v("忽略那些短路的服务器，并选择并发数较低的服务器。")])]),a._v(" "),t("tr",[t("td",[a._v("RandomRule")]),a._v(" "),t("td",[a._v("随机选择一个可用的服务器。")])]),a._v(" "),t("tr",[t("td",[a._v("RetryRule")]),a._v(" "),t("td",[a._v("重试机制的选择逻辑")])])])]),a._v(" "),t("p",[a._v("默认的实现就是ZoneAvoidanceRule，是一种轮询方案")]),a._v(" "),t("h3",{attrs:{id:"自定义负载均衡策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义负载均衡策略"}},[a._v("#")]),a._v(" 自定义负载均衡策略")]),a._v(" "),t("p",[a._v("通过定义IRule实现可以修改负载均衡规则，有两种方式：")]),a._v(" "),t("ol",[t("li",[a._v("代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：不管访问哪个微服务都使用这个规则")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IRule")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("randomRule")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RandomRule")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：可以指定某个具体的微服务使用这个规则")])]),a._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("userservice")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 给某个微服务配置负载均衡规则，这里是userservice服务")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ribbon")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("NFLoadBalancerRuleClassName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" com.netflix.loadbalancer.RandomRule "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 负载均衡规则 ")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("blockquote",[t("p",[t("strong",[a._v("注意")]),a._v("，一般用默认的负载均衡规则，不做修改。")])]),a._v(" "),t("h2",{attrs:{id:"饥饿加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#饥饿加载"}},[a._v("#")]),a._v(" 饥饿加载")]),a._v(" "),t("p",[a._v("Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。")]),a._v(" "),t("p",[a._v("而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：")]),a._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("ribbon")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("eager-load")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("enabled")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean important"}},[a._v("true")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("clients")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#指定饥饿加载的服务名称，是一个list")]),a._v("\n    \t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" userservice\n    \t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("-")]),a._v(" xxservice\t   \n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br")])]),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://markdown-1301334775.cos.eu-frankfurt.myqcloud.com/markdown/image-20220412004958615.png",alt:"image-20220412004958615"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);