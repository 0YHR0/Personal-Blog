(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{530:function(e,v,t){"use strict";t.r(v);var n=t(2),r=Object(n.a)({},(function(){var e=this,v=e._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"k8s中的nv插件相关概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#k8s中的nv插件相关概念"}},[e._v("#")]),e._v(" k8s中的nv插件相关概念")]),e._v(" "),v("h2",{attrs:{id:"k8s-device-plugin是什么-用来解决什么问题-是什么机制实现的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#k8s-device-plugin是什么-用来解决什么问题-是什么机制实现的"}},[e._v("#")]),e._v(" k8s device plugin是什么，用来解决什么问题，是什么机制实现的")]),e._v(" "),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("Kubernetes (k8s) Device Plugins 是一种扩展机制，用于将特定类型的硬件设备（如 GPU、FPGA、InfiniBand 等）集成到 Kubernetes 集群中，并使这些设备能够被调度和使用。它们解决了 Kubernetes 对异构硬件资源管理的需求。")]),e._v(" "),v("h3",{attrs:{id:"解决的问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解决的问题"}},[e._v("#")]),e._v(" 解决的问题")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("异构硬件支持")]),e._v("：原生的 Kubernetes 仅对 CPU 和内存资源有内建支持，而对 GPU、FPGA 等特殊硬件资源缺乏支持。Device Plugin 提供了一种标准化的方法来暴露和管理这些特殊硬件。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("硬件调度")]),e._v("：通过 Device Plugin，Kubernetes 调度器可以感知并调度包含特殊硬件需求的 Pod，从而让这些 Pod 能够正确地运行在具有相应硬件资源的节点上。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("资源隔离")]),e._v("：Device Plugins 允许 Kubernetes 在分配硬件资源时进行隔离，确保每个 Pod 都能独占或共享硬件资源，按照预期的方式进行资源分配。")])])]),e._v(" "),v("h3",{attrs:{id:"实现机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实现机制"}},[e._v("#")]),e._v(" 实现机制")]),e._v(" "),v("p",[e._v("Device Plugin 的工作机制包括以下几个步骤：")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("注册")]),e._v("：设备插件需要向 kubelet 注册自己。注册时，设备插件会告知 kubelet 它管理的设备类型和设备列表。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("设备发现")]),e._v("：设备插件负责发现和监控节点上的硬件设备，并将这些设备信息报告给 kubelet。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("设备分配")]),e._v("：当有 Pod 需要使用特定硬件设备时，kubelet 会调用设备插件进行设备分配。设备插件会根据请求分配适当的设备，并返回设备节点的配置信息（如设备文件的路径、环境变量等）。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("设备健康监测")]),e._v("：设备插件需要监测设备的健康状态，并向 kubelet 报告。当设备出现故障或恢复时，设备插件需要及时通知 kubelet。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("通信协议")]),e._v("：设备插件与 kubelet 之间通过 gRPC 协议进行通信。Kubernetes 定义了标准的 gRPC 接口，设备插件实现这些接口即可完成与 kubelet 的交互。")])])]),e._v(" "),v("h3",{attrs:{id:"工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[e._v("#")]),e._v(" 工作流程")]),e._v(" "),v("ol",[v("li",[v("strong",[e._v("设备插件启动并注册")]),e._v("：设备插件在节点上启动，并通过 gRPC 向 kubelet 注册。")]),e._v(" "),v("li",[v("strong",[e._v("设备发现与报告")]),e._v("：设备插件发现节点上的硬件设备，并将设备列表报告给 kubelet。")]),e._v(" "),v("li",[v("strong",[e._v("设备分配请求")]),e._v("：当 Pod 需要使用特定硬件资源时，kubelet 向设备插件发送设备分配请求。")]),e._v(" "),v("li",[v("strong",[e._v("设备分配响应")]),e._v("：设备插件分配适当的设备资源，并返回设备配置信息给 kubelet。")]),e._v(" "),v("li",[v("strong",[e._v("Pod 使用设备")]),e._v("：kubelet 根据设备配置信息启动 Pod，使其能够使用分配的硬件设备。")])]),e._v(" "),v("p",[e._v("通过这种机制，Kubernetes 可以灵活地支持和管理多种异构硬件资源，并确保这些资源能够被正确地调度和使用。")]),e._v(" "),v("h2",{attrs:{id:"以-nvidia-gpu设备为例-如果已经有了device-plugin-那么还需要-nvidia-driver吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#以-nvidia-gpu设备为例-如果已经有了device-plugin-那么还需要-nvidia-driver吗"}},[e._v("#")]),e._v(" 以 NVIDIA GPU设备为例，如果已经有了device plugin，那么还需要 NVIDIA driver吗")]),e._v(" "),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("是的，即使已经有了  NVIDIA GPU 的 Device Plugin，仍然需要安装  NVIDIA 驱动程序。这是因为设备插件和驱动程序在系统中扮演着不同的角色，分别负责不同的任务。")]),e._v(" "),v("h3",{attrs:{id:"角色和功能"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#角色和功能"}},[e._v("#")]),e._v(" 角色和功能")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("NVIDIA 驱动程序")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("硬件管理和控制")]),e._v("： NVIDIA 驱动程序负责与物理 GPU 硬件进行低级别的通信和控制。它提供了操作系统与 GPU 之间的接口，使得系统可以识别和使用 GPU。")]),e._v(" "),v("li",[v("strong",[e._v("功能支持")]),e._v("：驱动程序提供了 GPU 的各种功能支持，如 CUDA 计算、图形渲染等。")]),e._v(" "),v("li",[v("strong",[e._v("性能优化")]),e._v("：驱动程序包含了各种性能优化技术，确保 GPU 能够高效地运行。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("资源暴露和管理")]),e._v("： NVIDIA Device Plugin 负责向 Kubernetes 暴露 GPU 资源，并管理这些资源的分配。")]),e._v(" "),v("li",[v("strong",[e._v("调度支持")]),e._v("：通过与 kubelet 的交互，Device Plugin 使 Kubernetes 能够正确地调度需要 GPU 的容器。")]),e._v(" "),v("li",[v("strong",[e._v("资源隔离")]),e._v("：确保不同的容器能够正确地共享或独占 GPU 资源，按需分配。")])])])]),e._v(" "),v("h3",{attrs:{id:"必须安装-nvidia-驱动程序的原因"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#必须安装-nvidia-驱动程序的原因"}},[e._v("#")]),e._v(" 必须安装  NVIDIA 驱动程序的原因")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("底层支持")]),e._v("：Device Plugin 依赖于底层的  NVIDIA 驱动程序来实际操作 GPU。没有驱动程序，Device Plugin 无法与 GPU 硬件进行通信。")]),e._v(" "),v("li",[v("strong",[e._v("功能实现")]),e._v("：许多 GPU 功能（如 CUDA 计算）需要通过驱动程序来实现。Device Plugin 本身并不提供这些功能，而是依赖驱动程序提供的接口。")]),e._v(" "),v("li",[v("strong",[e._v("稳定性和性能")]),e._v("：驱动程序包含了许多硬件特定的优化和稳定性改进，确保 GPU 能够高效、稳定地运行。")])]),e._v(" "),v("h3",{attrs:{id:"典型的安装步骤"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#典型的安装步骤"}},[e._v("#")]),e._v(" 典型的安装步骤")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("安装  NVIDIA 驱动程序")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("在每个 Kubernetes 节点上安装适合 GPU 型号和操作系统版本的  NVIDIA 驱动程序。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("安装  NVIDIA Container Toolkit")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("安装  NVIDIA Container Toolkit，使得容器能够使用 GPU 资源。这包括 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 等组件。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("部署  NVIDIA Device Plugin")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("在 Kubernetes 集群中部署  NVIDIA Device Plugin，使得 Kubernetes 能够识别和调度 GPU 资源。")])])])]),e._v(" "),v("p",[e._v("通过这套组合，Kubernetes 能够有效地管理和使用  NVIDIA GPU 资源，为需要 GPU 加速的应用提供支持。")]),e._v(" "),v("h2",{attrs:{id:"这些东西是如何协同工作的-各自负责解决什么问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#这些东西是如何协同工作的-各自负责解决什么问题"}},[e._v("#")]),e._v(" 这些东西是如何协同工作的，各自负责解决什么问题")]),e._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("NVIDIA Container Toolkit  \nnvidia-container-runtime  \nNVIDIA Device Plugin  \nNVIDIA DRIVER  \nK8S device plugin  \n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br"),v("span",{staticClass:"line-number"},[e._v("5")]),v("br")])]),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("NVIDIA 提供了一套工具和组件，使得 Kubernetes 能够高效地管理和使用  NVIDIA GPU 资源。这些组件包括  NVIDIA Driver、 NVIDIA Container Toolkit、 nvidia-container-runtime、 NVIDIA Device Plugin 和 Kubernetes Device Plugin。下面我将详细解释这些组件各自的作用以及它们如何协同工作。")]),e._v(" "),v("h3",{attrs:{id:"各组件的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#各组件的作用"}},[e._v("#")]),e._v(" 各组件的作用")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("NVIDIA Driver")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("角色")]),e._v("：驱动程序")]),e._v(" "),v("li",[v("strong",[e._v("功能")]),e._v("： NVIDIA Driver 是底层的硬件驱动程序，负责与物理 GPU 硬件进行通信和控制。它提供了操作系统与 GPU 之间的接口，使系统能够识别和使用 GPU。")]),e._v(" "),v("li",[v("strong",[e._v("解决的问题")]),e._v("：提供 GPU 的基础功能支持和硬件控制。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("NVIDIA Container Toolkit")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("角色")]),e._v("：容器工具包")]),e._v(" "),v("li",[v("strong",[e._v("功能")]),e._v("： NVIDIA Container Toolkit（包括 "),v("code",[e._v("NVIDIA-docker2")]),e._v(" 和 "),v("code",[e._v("nvidia-container-runtime")]),e._v("）使得容器能够使用 GPU 资源。它提供了必要的容器运行时支持，使得容器能够访问 GPU 驱动程序和库。")]),e._v(" "),v("li",[v("strong",[e._v("解决的问题")]),e._v("：使容器能够使用 GPU 资源，包括 CUDA 和其他 GPU 加速库。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("nvidia-container-runtime")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("角色")]),e._v("：容器运行时")]),e._v(" "),v("li",[v("strong",[e._v("功能")]),e._v("：这是 "),v("code",[e._v("runc")]),e._v(" 的一个替代品，专门用于处理 GPU 相关的设置。它确保容器在启动时能够正确地访问 GPU 资源。")]),e._v(" "),v("li",[v("strong",[e._v("解决的问题")]),e._v("：在容器启动时配置 GPU 环境，使得容器能够使用 GPU 资源。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("角色")]),e._v("：Kubernetes 设备插件")]),e._v(" "),v("li",[v("strong",[e._v("功能")]),e._v("： NVIDIA Device Plugin 向 Kubernetes 暴露 GPU 资源。它与 kubelet 交互，报告可用的 GPU 设备，并管理这些设备的分配和使用。")]),e._v(" "),v("li",[v("strong",[e._v("解决的问题")]),e._v("：使 Kubernetes 能够识别和调度 GPU 资源。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Kubernetes Device Plugin")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("角色")]),e._v("：设备插件接口")]),e._v(" "),v("li",[v("strong",[e._v("功能")]),e._v("：这是 Kubernetes 提供的一种扩展机制，允许第三方插件（如  NVIDIA Device Plugin）向 Kubernetes 暴露和管理特定类型的硬件设备。")]),e._v(" "),v("li",[v("strong",[e._v("解决的问题")]),e._v("：提供标准化的接口，使得不同类型的硬件设备可以被 Kubernetes 管理。")])])])]),e._v(" "),v("h3",{attrs:{id:"协同工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#协同工作流程"}},[e._v("#")]),e._v(" 协同工作流程")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("驱动程序安装")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("在每个 Kubernetes 节点上安装  NVIDIA Driver。驱动程序确保操作系统能够识别和使用 GPU 硬件。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("容器工具包安装")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("安装  NVIDIA Container Toolkit（包括 "),v("code",[e._v("NVIDIA-docker2")]),e._v(" 和 "),v("code",[e._v("nvidia-container-runtime")]),e._v("），确保容器能够访问和使用 GPU 资源。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Device Plugin 部署")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("在 Kubernetes 集群中部署  NVIDIA Device Plugin。插件向 kubelet 注册自己，并报告可用的 GPU 设备。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Pod 调度和启动")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("当用户提交一个需要 GPU 的 Pod 时，Kubernetes 调度器会根据节点上的 GPU 资源情况进行调度。")]),e._v(" "),v("li",[e._v("kubelet 使用  NVIDIA Device Plugin 分配 GPU 资源，并启动容器。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("容器运行时配置")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("nvidia-container-runtime")]),e._v(" 在容器启动时配置 GPU 环境，使得容器能够访问 GPU 驱动程序和库。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("GPU 使用")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("容器内的应用程序通过  NVIDIA Driver 使用 GPU 进行计算或渲染任务。")])])])]),e._v(" "),v("p",[e._v("以下是一个高层次的工作流程示意图：")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("安装和配置")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("安装  NVIDIA Driver -> 安装  NVIDIA Container Toolkit -> 部署  NVIDIA Device Plugin")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("运行时")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("用户提交需要 GPU 的 Pod -> Kubernetes 调度器调度到有 GPU 的节点 -> kubelet 请求  NVIDIA Device Plugin 分配 GPU -> "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 配置容器环境 -> 容器启动并使用 GPU")])])])]),e._v(" "),v("p",[e._v("通过这种协同工作，各组件共同确保 Kubernetes 能够高效地管理和使用 GPU 资源，从而为需要 GPU 加速的应用提供支持。")]),e._v(" "),v("h2",{attrs:{id:"看起来-nvidia-container-toolkit中只用到了-nvidia-container-runtime-那么在toolkit中其他还有什么-为什么没有被使用到-如果我只安装-nvidia-container-runtime可不可以"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#看起来-nvidia-container-toolkit中只用到了-nvidia-container-runtime-那么在toolkit中其他还有什么-为什么没有被使用到-如果我只安装-nvidia-container-runtime可不可以"}},[e._v("#")]),e._v(" 看起来 NVIDIA Container Toolkit中只用到了 nvidia-container-runtime，那么在toolkit中其他还有什么？为什么没有被使用到？如果我只安装 nvidia-container-runtime可不可以")]),e._v(" "),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("NVIDIA Container Toolkit 是  NVIDIA 提供的一整套工具，旨在简化在容器环境中使用 GPU 的过程。虽然 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 是其中的一个重要组件，但整个工具包包含了更多的工具和库，用于不同的用途和场景。")]),e._v(" "),v("h3",{attrs:{id:"nvidia-container-toolkit-的组成部分"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nvidia-container-toolkit-的组成部分"}},[e._v("#")]),e._v(" NVIDIA Container Toolkit 的组成部分")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("nvidia-container-runtime")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("功能")]),e._v("：这是一个容器运行时，扩展了标准的 "),v("code",[e._v("runc")]),e._v("，使得容器能够访问 GPU 资源。它负责在容器启动时配置 GPU 环境。")]),e._v(" "),v("li",[v("strong",[e._v("角色")]),e._v("：在容器启动时配置 GPU 环境。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("NVIDIA-container-toolkit")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("功能")]),e._v("：这是一个工具包，包含了配置和管理  NVIDIA 容器运行时环境所需的所有工具和库。它包括 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 和其他辅助工具。")]),e._v(" "),v("li",[v("strong",[e._v("角色")]),e._v("：提供一整套工具和配置文件，用于设置和管理 GPU 容器环境。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("NVIDIA-container-cli")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("功能")]),e._v("：这是一个命令行工具，用于配置和管理容器中的  NVIDIA 设备。它允许用户手动配置容器以使用 GPU。")]),e._v(" "),v("li",[v("strong",[e._v("角色")]),e._v("：提供手动配置和调试工具。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("lib NVIDIA-container")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("功能")]),e._v("：这是一个底层库，用于与  NVIDIA GPU 设备进行交互。它提供了 GPU 资源在容器中的隔离和管理功能。")]),e._v(" "),v("li",[v("strong",[e._v("角色")]),e._v("：底层库，用于 GPU 资源管理。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("NVIDIA-docker2")]),e._v("（已被  NVIDIA-container-toolkit 取代）：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("功能")]),e._v("：这是一个 Docker 插件，曾经用于简化在 Docker 中使用 GPU 的过程。现在已被 "),v("code",[e._v("NVIDIA-container-toolkit")]),e._v(" 所取代。")]),e._v(" "),v("li",[v("strong",[e._v("角色")]),e._v("：旧版工具，现已被新的工具包取代。")])])])]),e._v(" "),v("h3",{attrs:{id:"为什么其他组件没有被显式提到"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么其他组件没有被显式提到"}},[e._v("#")]),e._v(" 为什么其他组件没有被显式提到？")]),e._v(" "),v("p",[e._v("在 Kubernetes 环境中，通常只需要 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 来确保容器能够正确使用 GPU 资源。许多其他功能（例如手动配置和调试工具）在自动化的 Kubernetes 环境中可能不需要显式使用，因为这些功能已经被集成和自动化。")]),e._v(" "),v("h3",{attrs:{id:"只安装-nvidia-container-runtime-可不可以"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#只安装-nvidia-container-runtime-可不可以"}},[e._v("#")]),e._v(" 只安装  nvidia-container-runtime 可不可以？")]),e._v(" "),v("p",[v("strong",[e._v("理论上")]),e._v("，只安装 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 是可以的，但实际操作中可能会遇到一些问题：")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("依赖关系")]),e._v("："),v("code",[e._v("nvidia-container-runtime")]),e._v(" 依赖于 "),v("code",[e._v("lib NVIDIA-container")]),e._v(" 和其他库。如果这些库没有正确安装和配置，"),v("code",[e._v("nvidia-container-runtime")]),e._v(" 可能无法正常工作。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("配置文件")]),e._v("："),v("code",[e._v("nvidia-container-runtime")]),e._v(" 需要一些配置文件（如 "),v("code",[e._v("config.toml")]),e._v("）来定义其行为。这些配置文件通常由 "),v("code",[e._v("NVIDIA-container-toolkit")]),e._v(" 提供和管理。如果没有这些配置文件，运行时可能无法正确配置 GPU 环境。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("完整性和兼容性")]),e._v("：安装完整的 "),v("code",[e._v("NVIDIA-container-toolkit")]),e._v(" 确保了所有相关工具和库的版本兼容性，减少了潜在的错误和配置问题。")])])]),e._v(" "),v("h3",{attrs:{id:"推荐的安装方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#推荐的安装方法"}},[e._v("#")]),e._v(" 推荐的安装方法")]),e._v(" "),v("p",[e._v("为了确保一切顺利，并避免潜在的依赖和配置问题，推荐安装完整的 "),v("code",[e._v("NVIDIA-container-toolkit")]),e._v("。以下是安装步骤：")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("设置  NVIDIA 包存储库")]),e._v("：")]),e._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("distribution=$(. /etc/os-release;echo $ID$VERSION_ID)\ncurl -s -L https:// NVIDIA.github.io/ NVIDIA-docker/gpgkey | sudo apt-key add -\ncurl -s -L https:// NVIDIA.github.io/ NVIDIA-docker/$distribution/ NVIDIA-docker.list | sudo tee /etc/apt/sources.list.d/ NVIDIA-docker.list\nsudo apt-get update\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("安装  NVIDIA Container Toolkit")]),e._v("：")]),e._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("sudo apt-get install -y  NVIDIA-container-toolkit\nsudo systemctl restart docker\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br")])])])]),e._v(" "),v("p",[e._v("通过安装完整的 "),v("code",[e._v("NVIDIA-container-toolkit")]),e._v("，你可以确保所有必要的组件和配置文件都正确安装和配置，从而避免潜在的问题，并确保 GPU 能够在容器中正确使用。")]),e._v(" "),v("h2",{attrs:{id:"我看到你提到了-nvidia-device-plugin和k8s-device-plugin-这两个是同一个概念吗-互相之间如何配合工作的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#我看到你提到了-nvidia-device-plugin和k8s-device-plugin-这两个是同一个概念吗-互相之间如何配合工作的"}},[e._v("#")]),e._v(" 我看到你提到了 NVIDIA device plugin和k8s device plugin，这两个是同一个概念吗，互相之间如何配合工作的？")]),e._v(" "),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("NVIDIA Device Plugin 和 Kubernetes Device Plugin 并不是两个独立的插件，而是包含关系。具体来说：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Kubernetes Device Plugin")]),e._v("是一个通用概念，指的是 Kubernetes 提供的一种扩展机制，允许第三方插件向 Kubernetes 暴露和管理特定类型的硬件设备。")]),e._v(" "),v("li",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("是 Kubernetes Device Plugin 机制的一个具体实现，专门用于管理和暴露  NVIDIA GPU 资源。")])]),e._v(" "),v("h3",{attrs:{id:"关系和配合工作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#关系和配合工作"}},[e._v("#")]),e._v(" 关系和配合工作")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("Kubernetes Device Plugin Framework")]),e._v(":")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("概念")]),e._v("：这是 Kubernetes 提供的一个框架，使得不同的硬件供应商可以开发自己的设备插件。这个框架定义了一些标准接口和协议（如 gRPC），以便设备插件与 Kubernetes 交互。")]),e._v(" "),v("li",[v("strong",[e._v("功能")]),e._v("：提供标准化的接口，使得 Kubernetes 可以通过这些接口与设备插件进行通信，管理节点上的硬件资源。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v(":")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("概念")]),e._v("：这是一个具体的设备插件，实现了 Kubernetes Device Plugin 框架的接口，用于管理  NVIDIA GPU 资源。")]),e._v(" "),v("li",[v("strong",[e._v("功能")]),e._v("：向 Kubernetes 暴露  NVIDIA GPU 资源，并处理 GPU 资源的分配和使用。它负责与 kubelet 交互，报告可用的 GPU 设备，并在需要时分配这些设备。")])])])]),e._v(" "),v("h3",{attrs:{id:"工作流程-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作流程-2"}},[e._v("#")]),e._v(" 工作流程")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("安装和注册")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Kubernetes Device Plugin Framework")]),e._v("：Kubernetes 本身包含这个框架，并提供必要的接口和协议。")]),e._v(" "),v("li",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("：在 Kubernetes 集群中部署  NVIDIA Device Plugin。插件启动后会向 kubelet 注册自己，并报告节点上可用的 GPU 设备。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("设备发现和报告")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("：负责发现节点上的  NVIDIA GPU 设备，并向 kubelet 报告这些设备的信息。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("设备分配")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Kubernetes Device Plugin Framework")]),e._v("：当一个 Pod 需要使用 GPU 时，kubelet 会通过这个框架向  NVIDIA Device Plugin 发送设备分配请求。")]),e._v(" "),v("li",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("：根据请求分配适当的 GPU 设备，并返回设备配置信息给 kubelet。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Pod 使用 GPU")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("kubelet 根据设备配置信息启动 Pod，使其能够使用分配的 GPU 设备。此时，"),v("code",[e._v("nvidia-container-runtime")]),e._v(" 会配置容器环境，使其能够正确地使用 GPU。")])])])]),e._v(" "),v("h3",{attrs:{id:"配合工作示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配合工作示例"}},[e._v("#")]),e._v(" 配合工作示例")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("NVIDIA Device Plugin 启动并注册")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("NVIDIA Device Plugin 在每个 Kubernetes 节点上启动，并通过 Kubernetes Device Plugin Framework 向 kubelet 注册自己和可用的 GPU 设备。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Pod 提交和调度")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("用户提交一个需要 GPU 资源的 Pod。Kubernetes 调度器根据集群中各节点的 GPU 资源情况，将 Pod 调度到具有可用 GPU 的节点上。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("设备分配和启动容器")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("kubelet 在接收到调度到本节点的 Pod 后，通过 Kubernetes Device Plugin Framework 向  NVIDIA Device Plugin 发送设备分配请求。")]),e._v(" "),v("li",[e._v("NVIDIA Device Plugin 分配适当的 GPU 设备，并返回设备配置信息给 kubelet。")]),e._v(" "),v("li",[e._v("kubelet 使用这些配置信息，通过 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 启动容器，使其能够访问分配的 GPU 设备。")])])])]),e._v(" "),v("h3",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Kubernetes Device Plugin")]),e._v("是一个框架，允许不同硬件供应商开发设备插件。")]),e._v(" "),v("li",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("是这个框架的一个具体实现，用于管理  NVIDIA GPU 资源。")])]),e._v(" "),v("p",[e._v("两者通过标准化的接口和协议相互配合，使得 Kubernetes 能够高效地管理和使用  NVIDIA GPU 资源。")]),e._v(" "),v("h2",{attrs:{id:"如果从k8s的视角来看-以上这个过程应该是怎么样的。请你详细描述-包括k8s内部的一些细节-我正在学习k8s"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如果从k8s的视角来看-以上这个过程应该是怎么样的。请你详细描述-包括k8s内部的一些细节-我正在学习k8s"}},[e._v("#")]),e._v(" 如果从k8s的视角来看，以上这个过程应该是怎么样的。请你详细描述，包括k8s内部的一些细节，我正在学习k8s")]),e._v(" "),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("从 Kubernetes 的视角来看，使用  NVIDIA Device Plugin 来管理和调度 GPU 资源的过程涉及多个组件和步骤。以下是这个过程的详细描述，包括 Kubernetes 内部的一些细节：")]),e._v(" "),v("h3",{attrs:{id:"主要组件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#主要组件"}},[e._v("#")]),e._v(" 主要组件")]),e._v(" "),v("ol",[v("li",[v("strong",[e._v("Kubernetes API Server")]),e._v("：处理所有 RESTful API 请求，包括创建和管理 Pod、节点和其他资源。")]),e._v(" "),v("li",[v("strong",[e._v("Kubernetes Scheduler")]),e._v("：决定 Pod 应该调度到哪个节点上。")]),e._v(" "),v("li",[v("strong",[e._v("Kubelet")]),e._v("：运行在每个节点上，负责管理该节点上的 Pod 和容器。")]),e._v(" "),v("li",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("：负责发现、报告和分配  NVIDIA GPU 设备。")]),e._v(" "),v("li",[v("strong",[e._v("Container Runtime")]),e._v("（如 Docker 或 CRI-O）：负责实际运行容器。")])]),e._v(" "),v("h3",{attrs:{id:"工作流程-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作流程-3"}},[e._v("#")]),e._v(" 工作流程")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("NVIDIA Device Plugin 部署和注册")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("部署  NVIDIA Device Plugin 到每个 Kubernetes 节点上，通常通过 DaemonSet 方式。")]),e._v(" "),v("li",[e._v("NVIDIA Device Plugin 启动后，通过 Kubernetes Device Plugin API（基于 gRPC）向本地的 kubelet 注册。")]),e._v(" "),v("li",[e._v("注册时， NVIDIA Device Plugin 会向 kubelet 报告节点上可用的 GPU 设备。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("设备发现和报告")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("NVIDIA Device Plugin 持续监控节点上的 GPU 设备，发现新的设备或设备状态变化时，实时更新并报告给 kubelet。")]),e._v(" "),v("li",[e._v("kubelet 收到设备信息后，将这些设备资源（如 "),v("code",[e._v("NVIDIA.com/GPU")]),e._v("）注册到节点的可用资源列表中，并通过 Kubernetes API Server 更新节点状态。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("用户提交 Pod 请求")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("用户通过 kubectl 或其他 Kubernetes API 客户端提交一个需要 GPU 资源的 Pod 定义，指定 "),v("code",[e._v("resources.limits")]),e._v(" 或 "),v("code",[e._v("resources.requests")]),e._v(" 字段中请求 GPU 资源（如 "),v("code",[e._v("NVIDIA.com/GPU: 1")]),e._v("）。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("API Server 接收请求")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("Kubernetes API Server 接收到创建 Pod 的请求后，将 Pod 对象保存到 etcd 中。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Scheduler 调度 Pod")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("Kubernetes Scheduler 监控 etcd 中的 Pod 对象，发现一个新的、未调度的 Pod。")]),e._v(" "),v("li",[e._v("Scheduler 根据集群中各节点的资源情况（包括 GPU 资源），决定将 Pod 调度到具备满足其资源需求的节点上。")]),e._v(" "),v("li",[e._v("Scheduler 将调度决定写回到 API Server。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Kubelet 接收调度指令")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("调度决定生效后，目标节点上的 kubelet 通过 API Server 获取到该 Pod 的定义。")]),e._v(" "),v("li",[e._v("Kubelet 发现 Pod 需要 GPU 资源，于是通过 Kubernetes Device Plugin API 向  NVIDIA Device Plugin 发送设备分配请求。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("NVIDIA Device Plugin 分配设备")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("NVIDIA Device Plugin 根据请求，分配适当的 GPU 设备，并返回设备配置信息（如设备文件路径、环境变量等）给 kubelet。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Kubelet 配置和启动容器")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("Kubelet 根据  NVIDIA Device Plugin 返回的配置信息，配置容器环境，使其能够访问分配的 GPU 设备。")]),e._v(" "),v("li",[e._v("Kubelet 使用配置好的参数，通过容器运行时（如 Docker 或 CRI-O）启动容器。此时，"),v("code",[e._v("nvidia-container-runtime")]),e._v(" 会配置容器环境，使其能够正确使用 GPU 资源。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Pod 运行")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("容器启动后，Pod 开始运行，应用程序可以访问并使用分配的 GPU 资源进行计算。")])])])]),e._v(" "),v("h3",{attrs:{id:"内部细节"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#内部细节"}},[e._v("#")]),e._v(" 内部细节")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Kubernetes Device Plugin API")]),e._v("：这是 kubelet 和设备插件之间的通信协议，基于 gRPC。 NVIDIA Device Plugin 实现了这个 API，与 kubelet 进行交互。")]),e._v(" "),v("li",[v("strong",[e._v("资源调度")]),e._v("：Scheduler 在调度 Pod 时，会考虑每个节点的可用资源，包括 CPU、内存和 GPU 等。调度策略可以通过插件和调度策略进行自定义。")]),e._v(" "),v("li",[v("strong",[e._v("设备分配")]),e._v("：当 kubelet 向  NVIDIA Device Plugin 发送设备分配请求时，插件会根据内部逻辑选择合适的 GPU 设备，并返回设备节点信息。kubelet 使用这些信息配置容器，使其能够访问 GPU 设备。")])]),e._v(" "),v("h3",{attrs:{id:"总结-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),v("p",[e._v("通过以上流程，Kubernetes 内部组件（API Server、Scheduler、Kubelet）与  NVIDIA Device Plugin 协同工作，实现了对 GPU 资源的管理和调度。 NVIDIA Device Plugin 通过 Kubernetes Device Plugin API 向 kubelet 暴露 GPU 资源，确保需要 GPU 的 Pod 能够正确地获取和使用这些资源。")]),e._v(" "),v("strike",[e._v("  \n## 我现在拿到了 nvidia-container-runtime的二进制文件，我应该怎么在linux上安装，以便我的k8s集群可以在这个节点上使用GPU容器？我的容器运行时是containerd\n"),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("要在你的 Linux 系统上安装 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 以便你的 Kubernetes 集群可以在这个节点上使用 GPU 容器，并且使用的是 "),v("code",[e._v("containerd")]),e._v(" 作为容器运行时，以下是详细的步骤：")]),e._v(" "),v("h3",{attrs:{id:"前提条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前提条件"}},[e._v("#")]),e._v(" 前提条件")]),e._v(" "),v("ol",[v("li",[v("strong",[e._v("NVIDIA Driver")]),e._v("：确保你的系统上已经安装了  NVIDIA GPU 驱动程序。")]),e._v(" "),v("li",[v("strong",[e._v("Containerd")]),e._v("：确保你的系统上已经安装并配置了 "),v("code",[e._v("containerd")]),e._v("。")])]),e._v(" "),v("h3",{attrs:{id:"安装-nvidia-container-runtime"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#安装-nvidia-container-runtime"}},[e._v("#")]),e._v(" 安装 "),v("code",[e._v("nvidia-container-runtime")])]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("下载并安装 "),v("code",[e._v("nvidia-container-runtime")])]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("假设你已经拿到了 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 的二进制文件，将它复制到 "),v("code",[e._v("/usr/bin")]),e._v(" 目录下并赋予执行权限："),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v("  nvidia-container-runtime /usr/bin/\n"),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x /usr/bin/ nvidia-container-runtime\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("安装 "),v("code",[e._v("lib NVIDIA-container")])]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("nvidia-container-runtime")]),e._v(" 依赖于 "),v("code",[e._v("lib NVIDIA-container")]),e._v("。你可以通过以下命令安装 "),v("code",[e._v("lib NVIDIA-container")]),e._v("："),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("distribution")]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),v("span",{pre:!0,attrs:{class:"token variable"}},[v("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),v("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" /etc/os-release"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),v("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" $ID$VERSION_ID"),v("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-s")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-L")]),e._v(" https:// NVIDIA.github.io/lib NVIDIA-container/gpgkey "),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" apt-key "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -\n"),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-s")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-L")]),e._v(" https:// NVIDIA.github.io/lib NVIDIA-container/"),v("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$distribution")]),e._v("/lib NVIDIA-container.list "),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" /etc/apt/sources.list.d/ NVIDIA-container-toolkit.list\n"),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update\n"),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-y")]),e._v(" lib NVIDIA-container-tools lib NVIDIA-container1\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br"),v("span",{staticClass:"line-number"},[e._v("5")]),v("br")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("配置 "),v("code",[e._v("containerd")])]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("创建或编辑 "),v("code",[e._v("containerd")]),e._v(" 配置文件（通常在 "),v("code",[e._v("/etc/containerd/config.toml")]),e._v("）以使用 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 作为默认运行时或为特定运行时配置：")]),e._v(" "),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" /etc/containerd\n"),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" containerd config default "),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /etc/containerd/config.toml\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br")])])]),e._v(" "),v("li",[v("p",[e._v("编辑配置文件以添加 "),v("code",[e._v("nvidia-container-runtime")]),e._v("：")]),e._v(" "),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("nano")]),e._v(" /etc/containerd/config.toml\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br")])]),v("p",[e._v("在文件中找到 "),v("code",[e._v('[plugins."io.containerd.grpc.v1.cri".containerd.runtimes]')]),e._v("，并添加 "),v("code",[e._v("NVIDIA")]),e._v(" 运行时配置：")]),e._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v('[plugins."io.containerd.grpc.v1.cri".containerd.runtimes. NVIDIA]\n  runtime_type = "io.containerd.runc.v2"\n  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes. NVIDIA.options]\n    BinaryName = "/usr/bin/ nvidia-container-runtime"\n')])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("重启 "),v("code",[e._v("containerd")])]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("应用配置更改并重启 "),v("code",[e._v("containerd")]),e._v("：")]),e._v(" "),v("p",[e._v("sudo systemctl restart containerd")])])])])]),e._v(" "),v("h3",{attrs:{id:"配置-kubernetes-节点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置-kubernetes-节点"}},[e._v("#")]),e._v(" 配置 Kubernetes 节点")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("安装  NVIDIA Device Plugin")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("部署  NVIDIA Device Plugin DaemonSet 到你的 Kubernetes 集群中。你可以使用官方的 YAML 文件："),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[e._v("kubectl apply "),v("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" https://raw.githubusercontent.com/ NVIDIA/k8s-device-plugin/main/ NVIDIA-device-plugin.yml\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("验证 GPU 可用性")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("部署完  NVIDIA Device Plugin 后，你可以验证 GPU 是否在 Kubernetes 中可用。运行以下命令查看节点上的 GPU 资源：")]),e._v(" "),v("p",[e._v("kubectl describe nodes "),v("your-node-name")],1)]),e._v(" "),v("li",[v("p",[e._v("你应该能够看到类似 "),v("code",[e._v("NVIDIA.com/GPU")]),e._v(" 的资源。")])])])])]),e._v(" "),v("h3",{attrs:{id:"部署使用-gpu-的-pod"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#部署使用-gpu-的-pod"}},[e._v("#")]),e._v(" 部署使用 GPU 的 Pod")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("创建一个使用 GPU 的 Pod")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("创建一个示例 Pod 定义文件 "),v("code",[e._v("GPU-pod.yaml")]),e._v("：")]),e._v(" "),v("p",[e._v("apiVersion: v1\nkind: Pod\nmetadata:\nname: cuda-vector-add\nspec:\ncontainers:")]),e._v(" "),v("ul",[v("li",[e._v('name: cuda-vector-add\nimage: " NVIDIA/samples:vectoradd-cuda10.2"\nresources:\nlimits:\nNVIDIA.com/GPU: 1 # 请求一个 GPU')])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("应用 Pod 配置")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("使用以下命令创建 Pod：")]),e._v(" "),v("p",[e._v("kubectl apply -f GPU-pod.yaml")])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("验证 Pod 运行状态")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("检查 Pod 是否正确运行：")]),e._v(" "),v("p",[e._v("kubectl get pods")])]),e._v(" "),v("li",[v("p",[e._v("查看 Pod 日志，确认 GPU 是否被正确使用：")]),e._v(" "),v("p",[e._v("kubectl logs cuda-vector-add")])])])])]),e._v(" "),v("p",[e._v("通过以上步骤，你应该能够配置你的 Kubernetes 节点使用 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 和 "),v("code",[e._v("containerd")]),e._v(" 来运行 GPU 容器，并成功部署和运行需要 GPU 资源的工作负载。\n")])]),v("p"),e._v(" "),v("h2",{attrs:{id:"还有一个概念是-nvidia-gpu-operator-这个东西也可以在k8s中提供gpu调度和渲染能力的挂载-这和刚刚提到的概念有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#还有一个概念是-nvidia-gpu-operator-这个东西也可以在k8s中提供gpu调度和渲染能力的挂载-这和刚刚提到的概念有什么区别"}},[e._v("#")]),e._v(" 还有一个概念是 NVIDIA GPU-Operator，这个东西也可以在k8s中提供GPU调度和渲染能力的挂载，这和刚刚提到的概念有什么区别？")]),e._v(" "),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("NVIDIA GPU Operator 是一个更高级别的工具，旨在简化和自动化 GPU 资源在 Kubernetes 集群中的管理和配置。它与前面提到的  NVIDIA Device Plugin、 nvidia-container-runtime 和其他组件一起工作，但提供了更高层次的抽象和自动化。")]),e._v(" "),v("h3",{attrs:{id:"nvidia-gpu-operator-的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nvidia-gpu-operator-的作用"}},[e._v("#")]),e._v(" NVIDIA GPU Operator 的作用")]),e._v(" "),v("p",[e._v("NVIDIA GPU Operator 使用 Kubernetes 的 Operator 模式来管理 GPU 资源。它自动化了以下任务：")]),e._v(" "),v("ol",[v("li",[v("strong",[e._v("安装和配置  NVIDIA GPU 驱动")]),e._v("：自动在每个节点上安装和配置适当的  NVIDIA GPU 驱动程序。")]),e._v(" "),v("li",[v("strong",[e._v("部署  NVIDIA Container Toolkit")]),e._v("：自动安装和配置 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 以及其他必要的工具和库。")]),e._v(" "),v("li",[v("strong",[e._v("部署  NVIDIA Device Plugin")]),e._v("：确保  NVIDIA Device Plugin 在集群中正确部署和运行，使 Kubernetes 能够发现和调度 GPU 资源。")]),e._v(" "),v("li",[v("strong",[e._v("监控和管理 GPU 资源")]),e._v("：提供更高级的监控和管理功能，确保 GPU 资源的健康和高效使用。")])]),e._v(" "),v("h3",{attrs:{id:"与前面提到的概念的区别和关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#与前面提到的概念的区别和关系"}},[e._v("#")]),e._v(" 与前面提到的概念的区别和关系")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("手动配置")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("前面提到的方法涉及手动安装和配置  NVIDIA Driver、 nvidia-container-runtime、 NVIDIA Device Plugin 等组件。这需要管理员具备一定的知识和经验，并且在集群规模扩大时，手动配置的复杂度和维护成本也会增加。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("自动化和管理")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("NVIDIA GPU Operator")]),e._v("提供了一个更高层次的抽象，它使用 Kubernetes 的 Operator 模式来自动化这些配置和管理任务。通过 GPU Operator，你可以避免手动安装和配置的繁琐步骤，确保集群中的所有节点都能自动且一致地配置好 GPU 资源。")])])])]),e._v(" "),v("h3",{attrs:{id:"工作流程-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作流程-4"}},[e._v("#")]),e._v(" 工作流程")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("GPU Operator 部署")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("部署  NVIDIA GPU Operator 到 Kubernetes 集群中，通常使用 Helm 或直接应用 YAML 文件。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("自动化配置")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("GPU Operator 自动在每个节点上安装和配置  NVIDIA GPU 驱动程序、 NVIDIA Container Toolkit（包括  nvidia-container-runtime）、以及  NVIDIA Device Plugin。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("GPU 资源调度和使用")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("一旦 GPU Operator 完成配置，Kubernetes 就可以自动调度和管理 GPU 资源。用户提交需要 GPU 资源的 Pod 时，Kubernetes 会根据可用资源进行调度，确保 Pod 能够正确地使用 GPU。")])])])]),e._v(" "),v("h3",{attrs:{id:"部署-nvidia-gpu-operator"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#部署-nvidia-gpu-operator"}},[e._v("#")]),e._v(" 部署  NVIDIA GPU Operator")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("安装 Helm")]),e._v("（如果还没有安装）：")]),e._v(" "),v("ul",[v("li",[e._v("Helm 是一个 Kubernetes 的包管理工具，用于简化应用程序的管理和部署。"),v("div",{staticClass:"language-bash line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-bash"}},[v("code",[v("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 "),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[e._v("bash")]),e._v("\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("添加  NVIDIA Helm 仓库")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("添加  NVIDIA 的 Helm 仓库以获取 GPU Operator 的 Helm Chart。")]),e._v(" "),v("p",[e._v("helm repo add  NVIDIA https:// NVIDIA.github.io/GPU-Operator\nhelm repo update")])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("部署 GPU Operator")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("使用 Helm 部署 GPU Operator：")]),e._v(" "),v("p",[e._v("helm install --wait --generate-name  NVIDIA/GPU-Operator")])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("验证安装")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("确认 GPU Operator 相关的 Pod 已经启动并运行：")]),e._v(" "),v("p",[e._v("kubectl get pods -n GPU-Operator-resources")])])])])]),e._v(" "),v("h3",{attrs:{id:"使用-gpu-operator-管理的集群"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用-gpu-operator-管理的集群"}},[e._v("#")]),e._v(" 使用 GPU Operator 管理的集群")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("提交 GPU 工作负载")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("通过 Kubernetes 提交需要 GPU 资源的 Pod，与之前的方式相同，如下所示："),v("div",{staticClass:"language-dockerfile line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[v("code",[e._v('apiVersion: v1\nkind: Pod\nmetadata:\n  name: cuda-vector-add\nspec:\n  containers:\n  - name: cuda-vector-add\n    image: " NVIDIA/samples:vectoradd-cuda10.2"\n    resources:\n      limits:\n         NVIDIA.com/GPU: 1 # 请求一个 GPU\n')])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br"),v("span",{staticClass:"line-number"},[e._v("5")]),v("br"),v("span",{staticClass:"line-number"},[e._v("6")]),v("br"),v("span",{staticClass:"line-number"},[e._v("7")]),v("br"),v("span",{staticClass:"line-number"},[e._v("8")]),v("br"),v("span",{staticClass:"line-number"},[e._v("9")]),v("br"),v("span",{staticClass:"line-number"},[e._v("10")]),v("br"),v("span",{staticClass:"line-number"},[e._v("11")]),v("br")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("应用 Pod 配置")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("使用 kubectl 创建 Pod：")]),e._v(" "),v("p",[e._v("kubectl apply -f GPU-pod.yaml")])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("验证 Pod 运行状态")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("检查 Pod 是否正确运行：")]),e._v(" "),v("p",[e._v("kubectl get pods")])]),e._v(" "),v("li",[v("p",[e._v("查看 Pod 日志，确认 GPU 是否被正确使用：")]),e._v(" "),v("p",[e._v("kubectl logs cuda-vector-add")])])])])]),e._v(" "),v("h3",{attrs:{id:"总结-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("手动配置")]),e._v("：手动安装和配置  NVIDIA Driver、 nvidia-container-runtime、 NVIDIA Device Plugin 等组件，适用于较小规模或需要高度自定义的集群。")]),e._v(" "),v("li",[v("strong",[e._v("NVIDIA GPU Operator")]),e._v("：自动化和管理 GPU 资源的安装和配置，适用于希望简化管理和提高一致性的集群。它提供了更高层次的抽象，使得集群中的所有节点都能自动且一致地配置好 GPU 资源，从而简化了运维工作。")])]),e._v(" "),v("p",[e._v("通过使用  NVIDIA GPU Operator，你可以显著简化 GPU 资源在 Kubernetes 集群中的配置和管理工作，使得集群能够更高效地支持 GPU 加速的工作负载。")]),e._v(" "),v("h2",{attrs:{id:"我是否可以理解为-nvidia-gpu-operator是集群级别的工具-而刚刚提到的概念都是节点级别的概念-我如果安装了-nvidia-gpu-operator-那么等于是在每个节点安装了之前提到的各种驱动和toolkit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#我是否可以理解为-nvidia-gpu-operator是集群级别的工具-而刚刚提到的概念都是节点级别的概念-我如果安装了-nvidia-gpu-operator-那么等于是在每个节点安装了之前提到的各种驱动和toolkit"}},[e._v("#")]),e._v(" 我是否可以理解为， NVIDIA GPU Operator是集群级别的工具，而刚刚提到的概念都是节点级别的概念，我如果安装了 NVIDIA GPU Operator，那么等于是在每个节点安装了之前提到的各种驱动和toolkit")]),e._v(" "),v("p",[v("strong",[e._v("assistant")]),e._v(":")]),e._v(" "),v("p",[e._v("是的，你的理解是正确的。 NVIDIA GPU Operator 是一个集群级别的工具，它旨在简化和自动化 GPU 资源在 Kubernetes 集群中的管理和配置。当你安装了  NVIDIA GPU Operator，它会在集群中的每个节点上自动安装和配置之前提到的各种驱动、toolkit 和插件。")]),e._v(" "),v("h3",{attrs:{id:"具体来说"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#具体来说"}},[e._v("#")]),e._v(" 具体来说：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("NVIDIA GPU Operator")]),e._v("：\n"),v("ul",[v("li",[v("strong",[e._v("集群级别工具")]),e._v("：它管理整个 Kubernetes 集群中的 GPU 资源。")]),e._v(" "),v("li",[v("strong",[e._v("自动化安装和配置")]),e._v("：\n"),v("ul",[v("li",[v("strong",[e._v("NVIDIA Driver")]),e._v("：自动在每个节点上安装和配置适当的  NVIDIA GPU 驱动程序。")]),e._v(" "),v("li",[v("strong",[e._v("NVIDIA Container Toolkit")]),e._v("：自动安装和配置 "),v("code",[e._v("nvidia-container-runtime")]),e._v(" 以及其他必要的工具和库。")]),e._v(" "),v("li",[v("strong",[e._v("NVIDIA Device Plugin")]),e._v("：确保  NVIDIA Device Plugin 在集群中正确部署和运行，使 Kubernetes 能够发现和调度 GPU 资源。")])])])])])]),e._v(" "),v("h3",{attrs:{id:"工作机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#工作机制"}},[e._v("#")]),e._v(" 工作机制")]),e._v(" "),v("ol",[v("li",[v("p",[v("strong",[e._v("部署  NVIDIA GPU Operator")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("你在 Kubernetes 集群中部署  NVIDIA GPU Operator（通常通过 Helm Chart 或直接使用 YAML 文件）。")])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("自动化执行")]),e._v("：")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("节点上的操作")]),e._v("：GPU Operator 在每个节点上执行以下操作：\n"),v("ul",[v("li",[e._v("安装  NVIDIA GPU 驱动程序，使操作系统能够识别和使用 GPU 硬件。")]),e._v(" "),v("li",[e._v("安装  NVIDIA Container Toolkit，包括 "),v("code",[e._v("nvidia-container-runtime")]),e._v("，确保容器能够访问和使用 GPU 资源。")]),e._v(" "),v("li",[e._v("部署和配置  NVIDIA Device Plugin，使 kubelet 能够发现和管理 GPU 资源。")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("GPU 资源管理")]),e._v("：")]),e._v(" "),v("ul",[v("li",[e._v("一旦这些组件在每个节点上安装和配置完成，GPU Operator 会监控和管理 GPU 资源的健康和使用情况，确保集群中的 GPU 资源能够高效地被调度和使用。")])])])]),e._v(" "),v("h3",{attrs:{id:"优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("简化运维")]),e._v("：通过自动化安装和配置，减少了手动操作的复杂性和潜在错误。")]),e._v(" "),v("li",[v("strong",[e._v("一致性")]),e._v("：确保集群中的所有节点都按照相同的方式配置，从而提高一致性和可靠性。")]),e._v(" "),v("li",[v("strong",[e._v("自动更新")]),e._v("：GPU Operator 可以自动处理驱动程序和工具的更新，减少了维护工作量。")])]),e._v(" "),v("h3",{attrs:{id:"总结-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结-4"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("节点级别工具")]),e._v("：包括  NVIDIA Driver、 nvidia-container-runtime、 NVIDIA Device Plugin 等，它们分别在每个节点上执行具体的功能，使节点能够使用 GPU 资源。")]),e._v(" "),v("li",[v("strong",[e._v("集群级别工具")]),e._v("： NVIDIA GPU Operator，负责在集群级别自动化安装和配置这些节点级别的工具，简化运维工作并确保一致性。")])]),e._v(" "),v("p",[e._v("当你安装了  NVIDIA GPU Operator，相当于自动在每个节点上安装和配置了之前提到的各种驱动和 toolkit，使得你的 Kubernetes 集群能够高效地管理和使用 GPU 资源。这种自动化和集中管理的方式特别适合大规模集群和需要高一致性的场景。")]),e._v(" "),v("hr")],1)}),[],!1,null,null,null);v.default=r.exports}}]);